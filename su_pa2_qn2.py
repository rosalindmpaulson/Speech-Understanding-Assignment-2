# -*- coding: utf-8 -*-
"""SU_PA2_Qn2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L03-omqRo-SCl4yK6SvEijd4IfD-IHBh

Task A
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.
import kagglehub
audio_dataset = kagglehub.dataset_download('hbchaitanyabharadwaj/audio-dataset-with-10-indian-languages')

print('Data source import complete.')

audio_dataset

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

import os
audio_files = os.listdir('/root/.cache/kagglehub/datasets/hbchaitanyabharadwaj/audio-dataset-with-10-indian-languages/versions/1/Language Detection Dataset')
for files in audio_files:
    print(files)
print(len(audio_files))

import librosa
import numpy as np
import IPython.display as ipd
import matplotlib.pyplot as plt
import librosa.display
import seaborn as sns
import warnings
from glob import glob
import pandas as pd

warnings.filterwarnings('ignore')

#malayalam language
file_name = "/kaggle/input/audio-dataset-with-10-indian-languages/Language Detection Dataset/Malayalam/10001.mp3"
data,sample_rate = librosa.load(file_name)
sns.lineplot(data=data)
file = ipd.Audio(file_name)
ipd.display(file)

import librosa
import numpy as np

def extract_mfcc(audio_path, n_mfcc=13):
    y, sr = librosa.load(audio_path, sr=None)
    mfccs = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=n_mfcc)
    return mfccs, sr

import matplotlib.pyplot as plt
import librosa.display

def plot_mfcc(mfccs, sr, title, hop_length=512):
    plt.figure(figsize=(10, 4))
    librosa.display.specshow(mfccs, sr=sr, hop_length=hop_length, x_axis='time')
    plt.colorbar()
    plt.title(f'MFCC - {title}')
    plt.xlabel('Time')
    plt.ylabel('MFCC Coefficients')
    plt.tight_layout()
    plt.show()

def mfcc_statistics(mfccs):
    mean_mfcc = np.mean(mfccs.T, axis=0) # Transpose to get (time steps, features)
    var_mfcc = np.var(mfccs.T, axis=0)
    return mean_mfcc, var_mfcc

import os
import random
import shutil

# Define dataset path and target languages
dataset_path = "/root/.cache/kagglehub/datasets/hbchaitanyabharadwaj/audio-dataset-with-10-indian-languages/versions/1/Language Detection Dataset"
languages = ["Malayalam", "Hindi", "Kannada"]
target_folder = "random_samples"
num_samples = 10

# Create a folder to store selected samples
os.makedirs(target_folder, exist_ok=True)

for lang in languages:
    lang_path = os.path.join(dataset_path, lang)
    if not os.path.exists(lang_path):
        print(f"Folder {lang_path} does not exist. Skipping.")
        continue

    # Get list of audio files in the language folder
    audio_files = [f for f in os.listdir(lang_path) if f.endswith(".wav") or f.endswith(".mp3")]

    if len(audio_files) < num_samples:
        print(f"Not enough samples in {lang}. Found {len(audio_files)} files.")
        selected_files = audio_files  # Take all available
    else:
        selected_files = random.sample(audio_files, num_samples)

    # Create subfolder for language in target folder
    lang_target_path = os.path.join(target_folder, lang)
    os.makedirs(lang_target_path, exist_ok=True)

    # Copy selected files to target folder
    for file in selected_files:
        src = os.path.join(lang_path, file)
        dst = os.path.join(lang_target_path, file)
        shutil.copy(src, dst)

        # Extract and plot MFCC
        print(dst)
        mfccs, sr = extract_mfcc(dst)
        plot_mfcc(mfccs, sr, title=f"{lang} - {file}")

        # Compute and print statistical analysis
        mean_mfcc, var_mfcc = mfcc_statistics(mfccs)
        print(f"{lang} - {file} - Mean MFCC: {mean_mfcc}")
        print(f"{lang} - {file} - Variance MFCC: {var_mfcc}")

    print(f"Selected {len(selected_files)} samples from {lang}.")

"""Task B"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import confusion_matrix,ConfusionMatrixDisplay
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dropout,Dense
from sklearn.preprocessing import StandardScaler

import os
dataset_path = '/root/.cache/kagglehub/datasets/hbchaitanyabharadwaj/audio-dataset-with-10-indian-languages/versions/1/Language Detection Dataset'
mfccs_feature = []
classes = []
for folder in os.listdir(dataset_path):
    folder_path = os.path.join(dataset_path,folder)
    audio_files = [f for f in os.listdir(folder_path) if f.endswith(".wav") or f.endswith(".mp3")]
    for file in audio_files[:2000]:
        file_path = os.path.join(folder_path,file)
        try:
          mfccs,sr = extract_mfcc(file_path)
          mean_mfcc, var_mfcc = mfcc_statistics(mfccs)
          mfccs_feature.append([mean_mfcc])
          classes.append(folder)
        except:
          pass

lbl = LabelEncoder()
# Convert to NumPy arrays
X = np.array(mfccs_feature)
y = lbl.fit_transform(classes)
y = np.array(y.tolist())

# Data preprocessing
scaler = StandardScaler()
X_ = [i[0] for i in X]
X_scaled = scaler.fit_transform(X_)

X_train, X_test, y_train, y_test = train_test_split(X_scaled,y,test_size=0.2,random_state=42)

model = Sequential()
model.add(Dense(100,activation='relu',input_shape=(13,)))
model.add(Dropout(0.5))

model.add(Dense(128,activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(225,activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(10,activation='softmax'))

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

history = model.fit(X_train,y_train,epochs=30,batch_size=32,validation_data=(X_test,y_test))

history_df = pd.DataFrame({'accuracy': history.history['accuracy'], 'val_accuracy': history.history['val_accuracy']})
history_df.plot()

model.evaluate(X_test,y_test)

y_pred = model.predict(X_test)
y_pred = (y_pred>0.5).astype(int)
y_pred = np.argmax(y_pred,axis=1)
y_pred

cnf = confusion_matrix(y_test,y_pred)
ConfusionMatrixDisplay(cnf,display_labels=lbl.classes_).plot()
plt.xticks(rotation=90)
plt.show()